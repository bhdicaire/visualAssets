all :	     resetText help 
list :	     resetText users groups roles

###############################################################################

programName    := AWS IAM
programVersion := 0.2
programSource  := https://github.com/bhdicaire/dnsConfiguration
modifiedBy     := Benoît H. Dicaire — BH@Dicaire.com

SHELL          := /bin/bash
makeLocation   := `which make`
makeVersion    := `make -v|grep GNU`
dateStamp      := $(shell date "+%Y%m%d")
tsvFiles       := $(shell ls *.tsv)
 
normalText     := "\033[0m"
boldText       := "\033[1m"
italicText     := "\033[3m"
underlineText  := "\033[4m"
redText        := "\033[31m"

tab            := "\t"
2tab            := "\t\t"
tabNormal      := $(tab)$(normalText)
tabBold        := $(tab)$(boldText)

cliLocation    := /usr/local/bin/aws
cliOutput      := --output text
cli            := $(cliLocation) $(cliOutput)

build_dir      := ~/Code/dnsConfiguration
gitRepository  := https://github.com/bhdicaire/dnsConfiguration
configFile     := dnsconfig.js

###############################################################################

fileName       := $(notdir src/doc.md)
fileNames      := $(notdir src/doc.md ./aws/config.txt)
dirName        := $(dir src/doc.md)
dirNames       := $(dir src/doc.md ./aws/config.txt)
suffixName     := $(suffix src/doc.md)
addSuffixName  := $(addsuffix .md, doc config)
baseNames      := $(basename src/doc.md ./aws/config.txt)
addPrefixName  := $(addprefix $(dateStamp) ,doc.md config.txt)
joinListName   := $(join doc.md, config.txt)
# $(wildcard pattern) # $(realpath names…) $(abspath names…)

###############################################################################

users:
	${cli} iam list-users > iamUsers.tsv
	${cli} iam list-access-keys > sshKeyAttached.tsv
	${cli} iam list-mfa-devices >iam2FA.tsv
	${cli} iam list-virtual-mfa-devices > iam2FA.tsv

groups:
	${cli} iam list-groups > iamGroups.tsv

roles:
	${cli} iam list-roles> iamRoles.tsv
#	${cli} iam list-role-policies --role-name xx >iamRolesAttachedPolicies.tsv

clean: *.tsv
	rm $^
	rm -rf archive

moveFilesBashStyle:
	@mkdir -p archive
	@for index in `ls *tsv`;  do \
		mv $$index archive/$(addprefix $(dateStamp)" ", $$index) ;\
    done

.PHONY: archive	
archive:
	clear
	@printf "#\n# Archive data files\n#\n"
	@mkdir -p archive
	$(foreach dataFile,$(tsvFiles), mv $(dataFile) archive/$(addprefix $(dateStamp)" ", $(dataFile));)
	git add archive
	git commit -m"Update IAM configuration and archive — $(dateStamp)"

commit:
	git add ${configFile}
	ifdef ticket
		git commit -m"Update DNS configurations with ticket #${ticket}"
	else
		git commit -m"Update #${dateStamp} ${configFile} — ${msg}"
	endif
	git push
	
help:
	@printf "\n\n"
	@echo -e $(normalText)
	@printf "###############################################################################\n\n"	
	@echo -e "\t$(programName) — v$(programVersion)" $(italicText)"with" $(normalText)"$(makeVersion) [$(makeLocation)]\n"
	@echo -e "\tsource:\t\t$(programSource)"
	@printf "\tmodified by:\t$(modifiedBy)\n\n"
	@printf "###############################################################################\n"	
	@echo -e $(boldText)
	@printf "\tTarget\t\tFunction\n"
	@echo -e $(normalText)
	@printf "\tall\t\tThis information\n"
	@printf "\tbuild\t\tPerform all tasks to build the application\n"
	@printf "\tinstall\t\tPerform all tasks to install the application\n"
	@printf "\tclean\t\tDelete the files generated by the application\n"
	@printf "\tcheck\t\tRun any tests associated with this application\n\n\n"

.PHONY: debug	
debug:
	@printf "\n\n"
	@echo -e $(normalText)
	@printf "###############################################################################\n\n"	
	@echo -e "\t$(programName) — v$(programVersion)" $(italicText)"with" $(normalText)"$(makeVersion) [$(makeLocation)]\n"
	@echo -e "\tsource:\t\t$(programSource)"
	@printf "\tmodified by:\t$(modifiedBy)\n\n"
	@printf "###############################################################################\n"	
	@echo -e $(boldText)
	@printf "All target available in the Makefile:\n"
	@echo -e $(normalText)
	@$(MAKE) --print-data-base | grep -v -e '^no-such-target' -e '^Makefile'| awk '/^[^.%][-A-Za-z0-9_]*:/{ print substr($$1, 1, length($$1)-1) }'| sort
	@printf "\n\n"
	
hints:
	@printf "\n\n"
	@echo -e $(normalText)
	@printf "###############################################################################\n\n"	
	@echo -e "\t$(programName) — v$(programVersion)" $(italicText)"with" $(normalText)"$(makeVersion) [$(makeLocation)]\n"
	@echo -e "\tsource:\t\t$(programSource)"
	@printf "\tmodified by:\t$(modifiedBy)\n\n"
	@printf "###############################################################################\n\n"

	@echo -e $(tabNormal)filename:$(tabBold)$(2tab)$(fileName)$(tabNormal)
	@echo -e $(tabNormal)filenames:$(tabBold)$(2tab)$(fileNames)$(tabNormal)
	@echo -e $(tabNormal)dirname:$(tabBold)$(2tab)$(dirName)$(tabNormal)
	@echo -e $(tabNormal)dirnames:$(tabBold)$(2tab)$(dirNames)$(tabNormal)
	@echo -e $(tabNormal)extract file extensiond:$(tabBold)$(suffixName)
	@echo -e $(tabNormal)Add file extensiond:$(tabBold)$(tab)$(addSuffixName)
	@echo -e $(tabNormal)Get file base name:$(tabBold)$(tab)$(baseNames)
	@echo -e $(tabNormal)Add prefix to file name:$(tabBold)$(addPrefixName)
	@echo -e $(tabNormal)Join two list:$(tabBold)$(2tab)$(joinListName)
	@printf "\n\n"	
	
resetText:
	@echo -e $(normalText)	